import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';
import {CVE} from "../../../models/analysis-related/cve.model";
import {CVEFilter, NumberRange} from "../../../models/view-related/filter.model";
import {FilterUtil} from "../../../utils/filter.util";
import {Subject} from "rxjs";
import {debounceTime, distinctUntilChanged} from "rxjs/operators";
import {Options} from "ng5-slider";

@Component({
  selector: 'app-cve-filter',
  templateUrl: './cve-filter.component.html',
  styleUrls: ['./cve-filter.component.scss']
})
export class CveFilterComponent implements OnInit {
  filterApplied: boolean;
  filterActive: boolean;
  searchTermEntered: Subject<string> = new Subject<string>();

  yearRangeOptions: Options;
  severityOptions: Options;
  @Output()
  updatedCVEs = new EventEmitter();
  private unfilteredCVEs: CVE[];
  private filter: CVEFilter;
  private yearRange: NumberRange;

  constructor() {
  }

  @Input()
  set vulnerabilities(cves: CVE[]) {
    this.unfilteredCVEs = cves;
  }

  ngOnInit() {
    this.setSearchTermObservable();
    this.prepareYearFilter();
    this.prepareSeverityFilter();
    this.resetFilter();
  }

  toggleFilter() {
    this.filterActive = !this.filterActive;
  }

  resetFilter() {
    this.filter = FilterUtil.setDefaultCVEFilter(this.yearRange);
    this.applyFilter();
  }

  setSearchFilter(searchTerm: any) {
    this.searchTermEntered.next(searchTerm);
  }

  setYearRange() {
    this.applyFilter();
  }

  setSeverityRange() {
    this.applyFilter();
  }

  private applyFilter() {
    this.filterApplied = FilterUtil.getCVEFilterAppliedStatus(this.filter, this.yearRange);
    this.updatedCVEs.emit(FilterUtil.applyCVEFilter(this.unfilteredCVEs, this.filter));
  }

  private setSearchTermObservable() {
    this.searchTermEntered.pipe(
      debounceTime(300),
      distinctUntilChanged()).subscribe((searchTerm: string) => {
      this.filter.searchTerm = searchTerm;
      this.applyFilter();
    });
  }

  private prepareYearFilter() {
    this.yearRange = FilterUtil.getYearRange(this.unfilteredCVEs);
    this.yearRangeOptions = {
      floor: this.yearRange.min,
      ceil: this.yearRange.max,
    };
  }

  private prepareSeverityFilter() {
    this.severityOptions = {
      floor: 0,
      ceil: 10
    };
  }
}
